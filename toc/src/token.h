#ifndef TOC_TOKEN_H
#define TOC_TOKEN_H

//token types
enum token_type {
  //instructions
  key_eq,
  key_gt,
  key_ls,
  key_ge,
  key_le,
  key_ne,
  key_zr,
  key_nz,
  key_addc,
  key_adds,
  key_addi,
  key_addp,
  key_addl,
  key_adduc,
  key_addus,
  key_addui,
  key_subc,
  key_subs,
  key_subi,
  key_subp,
  key_subl,
  key_subuc,
  key_subus,
  key_subui,
  key_mulc,
  key_muls,
  key_muli,
  key_mull,
  key_muluc,
  key_mulus,
  key_mului,
  key_divc,
  key_divs,
  key_divi,
  key_divl,
  key_divuc,
  key_divus,
  key_divui,
  key_remc,
  key_rems,
  key_remi,
  key_reml,
  key_remuc,
  key_remus,
  key_remui,
  key_lshc,
  key_lshs,
  key_lshi,
  key_lshl,
  key_lshuc,
  key_lshus,
  key_lshui,
  key_rshc,
  key_rshs,
  key_rshi,
  key_rshl,
  key_rshuc,
  key_rshus,
  key_rshui,
  key_orc,
  key_ors,
  key_ori,
  key_orl,
  key_oruc,
  key_orus,
  key_orui,
  key_andc,
  key_ands,
  key_andi,
  key_andl,
  key_anduc,
  key_andus,
  key_andui,
  key_notc,
  key_nots,
  key_noti,
  key_notl,
  key_notuc,
  key_notus,
  key_notui,
  key_xorc,
  key_xors,
  key_xori,
  key_xorl,
  key_xoruc,
  key_xorus,
  key_xorui,
  key_swap,
  key_pop,
  key_dup,
  key_ret,
  key_over,
  key_panic,
  key_write0,
  key_write1,
  key_write2,
  key_write3,
  key_write4,
  key_write5,
  key_write6,
  key_write7,
  key_vwrite0,
  key_vwrite1,
  key_vwrite2,
  key_vwrite3,
  key_vwrite4,
  key_vwrite5,
  key_vwrite6,
  key_vwrite7,
  key_get0,
  key_get1,
  key_get2,
  key_get3,
  key_get4,
  key_get5,
  key_get6,
  key_get7,
  key_vget0,
  key_vget1,
  key_vget2,
  key_vget3,
  key_vget4,
  key_vget5,
  key_vget6,
  key_vget7,
  key_loadc,
  key_loads,
  key_loadi,
  key_loadp,
  key_loadl,
  key_loaduc,
  key_loadus,
  key_loadui,
  key_vloadc,
  key_vloads,
  key_vloadi,
  key_vloadp,
  key_vloadl,
  key_vloaduc,
  key_vloadus,
  key_vloadui,
  key_aloadc,
  key_aloads,
  key_aloadi,
  key_aloadp,
  key_aloadl,
  key_aloaduc,
  key_aloadus,
  key_aloadui,
  key_valoadc,
  key_valoads,
  key_valoadi,
  key_valoadp,
  key_valoadl,
  key_valoaduc,
  key_valoadus,
  key_valoadui,
  key_storec,
  key_stores,
  key_storei,
  key_storep,
  key_storel,
  key_storeuc,
  key_storeus,
  key_storeui,
  key_vstorec,
  key_vstores,
  key_vstorei,
  key_vstorep,
  key_vstorel,
  key_vstoreuc,
  key_vstoreus,
  key_vstoreui,
  key_astorec,
  key_astores,
  key_astorei,
  key_astorep,
  key_astorel,
  key_astoreuc,
  key_astoreus,
  key_astoreui,
  key_vastorec,
  key_vastores,
  key_vastorei,
  key_vastorep,
  key_vastorel,
  key_vastoreuc,
  key_vastoreus,
  key_vastoreui,
  key_hlt,
  key_call,
  key_copy,
  key_pcopy,
  key_popa,
  key_put,
  key_pushsp,
  key_hltr,
  key_incsp,
  key_decsp,
  key_exit,
  key_force_panic,
  key_pushlt,
  key_rcall,
  key_open,
  key_invoke,
  key_pushpc,
  key_pushcs,

  //other keywords
  key_pushc,
  key_pushs,
  key_pushi,
  key_pushp,
  key_pushl,
  key_pushuc,
  key_pushus,
  key_pushui,
  key_import,
  key_hidden,
  key_exposed,
  key_struct,
  key_uc,
  key_us,
  key_ui,
  key_c,
  key_s,
  key_i,
  key_l,
  key_p,
  key_alignof,
  key_sizeof,
  key_if,
  key_else,
  key_set,

  //numeric-constant
  decimal_constant,
  octal_constant,
  binary_constant,
  hexadecimal_constant,

  //punctuator
  punc_colon,
  punc_minus,
  punc_plus,
  punc_dot,
  punc_openingcbrace,
  punc_closingcbrace,
  punc_openingparen,
  punc_closingparen,
};

//token classes
enum token_class {
  tk_keyword,
  tk_identifier,
  tk_character_constant,
  tk_string_constant,
  tk_numeric_constant,
  tk_punctuator,
  tokens_list_end
};

typedef struct s_token {
  enum token_class token_class;
  enum token_type token_type;
  uintmax_t start_y;
  uintmax_t start_x;
  uintmax_t end_x;
  uintmax_t end_y;
  char *token_string;
  size_t token_string_len;
  struct s_token *prev_token;
  struct s_token *next_token;
} token;

#endif
